// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: client/v1/client.proto

package clientv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Client) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ClientMultiError, or nil if none found.
func (m *Client) ValidateAll() error {
	return m.validate(true)
}

func (m *Client) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := ClientValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := ClientValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientName()) < 1 {
		err := ClientValidationError{
			field:  "ClientName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRedirectUris()) < 1 {
		err := ClientValidationError{
			field:  "RedirectUris",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_Client_RedirectUris_Unique := make(map[string]struct{}, len(m.GetRedirectUris()))

	for idx, item := range m.GetRedirectUris() {
		_, _ = idx, item

		if _, exists := _Client_RedirectUris_Unique[item]; exists {
			err := ClientValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_Client_RedirectUris_Unique[item] = struct{}{}
		}

		if uri, err := url.Parse(item); err != nil {
			err = ClientValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := ClientValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ClientValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ClientValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClientValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return ClientMultiError(errors)
	}

	return nil
}

// ClientMultiError is an error wrapping multiple validation errors returned by
// Client.ValidateAll() if the designated constraints aren't met.
type ClientMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClientMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClientMultiError) AllErrors() []error { return m }

// ClientValidationError is the validation error returned by Client.Validate if
// the designated constraints aren't met.
type ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientValidationError) ErrorName() string { return "ClientValidationError" }

// Error satisfies the builtin error interface
func (e ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientValidationError{}

// Validate checks the field values on CreateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClientRequestMultiError, or nil if none found.
func (m *CreateClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := CreateClientRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientName()) < 1 {
		err := CreateClientRequestValidationError{
			field:  "ClientName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRedirectUris()) < 1 {
		err := CreateClientRequestValidationError{
			field:  "RedirectUris",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_CreateClientRequest_RedirectUris_Unique := make(map[string]struct{}, len(m.GetRedirectUris()))

	for idx, item := range m.GetRedirectUris() {
		_, _ = idx, item

		if _, exists := _CreateClientRequest_RedirectUris_Unique[item]; exists {
			err := CreateClientRequestValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_CreateClientRequest_RedirectUris_Unique[item] = struct{}{}
		}

		if uri, err := url.Parse(item); err != nil {
			err = CreateClientRequestValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := CreateClientRequestValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return CreateClientRequestMultiError(errors)
	}

	return nil
}

// CreateClientRequestMultiError is an error wrapping multiple validation
// errors returned by CreateClientRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientRequestMultiError) AllErrors() []error { return m }

// CreateClientRequestValidationError is the validation error returned by
// CreateClientRequest.Validate if the designated constraints aren't met.
type CreateClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientRequestValidationError) ErrorName() string {
	return "CreateClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientRequestValidationError{}

// Validate checks the field values on CreateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateClientResponseMultiError, or nil if none found.
func (m *CreateClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(m.GetClientSecret()) < 1 {
		err := CreateClientResponseValidationError{
			field:  "ClientSecret",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateClientResponseMultiError(errors)
	}

	return nil
}

// CreateClientResponseMultiError is an error wrapping multiple validation
// errors returned by CreateClientResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateClientResponseMultiError) AllErrors() []error { return m }

// CreateClientResponseValidationError is the validation error returned by
// CreateClientResponse.Validate if the designated constraints aren't met.
type CreateClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateClientResponseValidationError) ErrorName() string {
	return "CreateClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateClientResponseValidationError{}

// Validate checks the field values on GetClientRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientRequestMultiError, or nil if none found.
func (m *GetClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := GetClientRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := GetClientRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetClientRequestMultiError(errors)
	}

	return nil
}

// GetClientRequestMultiError is an error wrapping multiple validation errors
// returned by GetClientRequest.ValidateAll() if the designated constraints
// aren't met.
type GetClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientRequestMultiError) AllErrors() []error { return m }

// GetClientRequestValidationError is the validation error returned by
// GetClientRequest.Validate if the designated constraints aren't met.
type GetClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientRequestValidationError) ErrorName() string { return "GetClientRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientRequestValidationError{}

// Validate checks the field values on GetClientResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetClientResponseMultiError, or nil if none found.
func (m *GetClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetClientResponseMultiError(errors)
	}

	return nil
}

// GetClientResponseMultiError is an error wrapping multiple validation errors
// returned by GetClientResponse.ValidateAll() if the designated constraints
// aren't met.
type GetClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetClientResponseMultiError) AllErrors() []error { return m }

// GetClientResponseValidationError is the validation error returned by
// GetClientResponse.Validate if the designated constraints aren't met.
type GetClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetClientResponseValidationError) ErrorName() string {
	return "GetClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetClientResponseValidationError{}

// Validate checks the field values on ListClientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClientsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClientsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClientsRequestMultiError, or nil if none found.
func (m *ListClientsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClientsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := ListClientsRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListClientsRequestMultiError(errors)
	}

	return nil
}

// ListClientsRequestMultiError is an error wrapping multiple validation errors
// returned by ListClientsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListClientsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClientsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClientsRequestMultiError) AllErrors() []error { return m }

// ListClientsRequestValidationError is the validation error returned by
// ListClientsRequest.Validate if the designated constraints aren't met.
type ListClientsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClientsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClientsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClientsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClientsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClientsRequestValidationError) ErrorName() string {
	return "ListClientsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClientsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClientsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClientsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClientsRequestValidationError{}

// Validate checks the field values on ListClientsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClientsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClientsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClientsResponseMultiError, or nil if none found.
func (m *ListClientsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClientsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetClients() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClientsResponseValidationError{
						field:  fmt.Sprintf("Clients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClientsResponseValidationError{
						field:  fmt.Sprintf("Clients[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClientsResponseValidationError{
					field:  fmt.Sprintf("Clients[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListClientsResponseMultiError(errors)
	}

	return nil
}

// ListClientsResponseMultiError is an error wrapping multiple validation
// errors returned by ListClientsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListClientsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClientsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClientsResponseMultiError) AllErrors() []error { return m }

// ListClientsResponseValidationError is the validation error returned by
// ListClientsResponse.Validate if the designated constraints aren't met.
type ListClientsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClientsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClientsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClientsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClientsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClientsResponseValidationError) ErrorName() string {
	return "ListClientsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClientsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClientsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClientsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClientsResponseValidationError{}

// Validate checks the field values on DeleteClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClientRequestMultiError, or nil if none found.
func (m *DeleteClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := DeleteClientRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := DeleteClientRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteClientRequestMultiError(errors)
	}

	return nil
}

// DeleteClientRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteClientRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClientRequestMultiError) AllErrors() []error { return m }

// DeleteClientRequestValidationError is the validation error returned by
// DeleteClientRequest.Validate if the designated constraints aren't met.
type DeleteClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClientRequestValidationError) ErrorName() string {
	return "DeleteClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClientRequestValidationError{}

// Validate checks the field values on DeleteClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteClientResponseMultiError, or nil if none found.
func (m *DeleteClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if len(errors) > 0 {
		return DeleteClientResponseMultiError(errors)
	}

	return nil
}

// DeleteClientResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteClientResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteClientResponseMultiError) AllErrors() []error { return m }

// DeleteClientResponseValidationError is the validation error returned by
// DeleteClientResponse.Validate if the designated constraints aren't met.
type DeleteClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteClientResponseValidationError) ErrorName() string {
	return "DeleteClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteClientResponseValidationError{}

// Validate checks the field values on RotateClientSecretRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RotateClientSecretRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RotateClientSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RotateClientSecretRequestMultiError, or nil if none found.
func (m *RotateClientSecretRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RotateClientSecretRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := RotateClientSecretRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := RotateClientSecretRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RotateClientSecretRequestMultiError(errors)
	}

	return nil
}

// RotateClientSecretRequestMultiError is an error wrapping multiple validation
// errors returned by RotateClientSecretRequest.ValidateAll() if the
// designated constraints aren't met.
type RotateClientSecretRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RotateClientSecretRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RotateClientSecretRequestMultiError) AllErrors() []error { return m }

// RotateClientSecretRequestValidationError is the validation error returned by
// RotateClientSecretRequest.Validate if the designated constraints aren't met.
type RotateClientSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RotateClientSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RotateClientSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RotateClientSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RotateClientSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RotateClientSecretRequestValidationError) ErrorName() string {
	return "RotateClientSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RotateClientSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRotateClientSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RotateClientSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RotateClientSecretRequestValidationError{}

// Validate checks the field values on RotateClientSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RotateClientSecretResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RotateClientSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RotateClientSecretResponseMultiError, or nil if none found.
func (m *RotateClientSecretResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RotateClientSecretResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetNewClientSecret()) < 1 {
		err := RotateClientSecretResponseValidationError{
			field:  "NewClientSecret",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RotateClientSecretResponseMultiError(errors)
	}

	return nil
}

// RotateClientSecretResponseMultiError is an error wrapping multiple
// validation errors returned by RotateClientSecretResponse.ValidateAll() if
// the designated constraints aren't met.
type RotateClientSecretResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RotateClientSecretResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RotateClientSecretResponseMultiError) AllErrors() []error { return m }

// RotateClientSecretResponseValidationError is the validation error returned
// by RotateClientSecretResponse.Validate if the designated constraints aren't met.
type RotateClientSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RotateClientSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RotateClientSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RotateClientSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RotateClientSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RotateClientSecretResponseValidationError) ErrorName() string {
	return "RotateClientSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RotateClientSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRotateClientSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RotateClientSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RotateClientSecretResponseValidationError{}

// Validate checks the field values on UpdateRedirectUrisRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRedirectUrisRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRedirectUrisRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRedirectUrisRequestMultiError, or nil if none found.
func (m *UpdateRedirectUrisRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRedirectUrisRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := UpdateRedirectUrisRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := UpdateRedirectUrisRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetRedirectUris()) < 1 {
		err := UpdateRedirectUrisRequestValidationError{
			field:  "RedirectUris",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	_UpdateRedirectUrisRequest_RedirectUris_Unique := make(map[string]struct{}, len(m.GetRedirectUris()))

	for idx, item := range m.GetRedirectUris() {
		_, _ = idx, item

		if _, exists := _UpdateRedirectUrisRequest_RedirectUris_Unique[item]; exists {
			err := UpdateRedirectUrisRequestValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "repeated value must contain unique items",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else {
			_UpdateRedirectUrisRequest_RedirectUris_Unique[item] = struct{}{}
		}

		if uri, err := url.Parse(item); err != nil {
			err = UpdateRedirectUrisRequestValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "value must be a valid URI",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		} else if !uri.IsAbs() {
			err := UpdateRedirectUrisRequestValidationError{
				field:  fmt.Sprintf("RedirectUris[%v]", idx),
				reason: "value must be absolute",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return UpdateRedirectUrisRequestMultiError(errors)
	}

	return nil
}

// UpdateRedirectUrisRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateRedirectUrisRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateRedirectUrisRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRedirectUrisRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRedirectUrisRequestMultiError) AllErrors() []error { return m }

// UpdateRedirectUrisRequestValidationError is the validation error returned by
// UpdateRedirectUrisRequest.Validate if the designated constraints aren't met.
type UpdateRedirectUrisRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRedirectUrisRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRedirectUrisRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRedirectUrisRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRedirectUrisRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRedirectUrisRequestValidationError) ErrorName() string {
	return "UpdateRedirectUrisRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRedirectUrisRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRedirectUrisRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRedirectUrisRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRedirectUrisRequestValidationError{}

// Validate checks the field values on UpdateRedirectUrisResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateRedirectUrisResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRedirectUrisResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateRedirectUrisResponseMultiError, or nil if none found.
func (m *UpdateRedirectUrisResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRedirectUrisResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateRedirectUrisResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateRedirectUrisResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRedirectUrisResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateRedirectUrisResponseMultiError(errors)
	}

	return nil
}

// UpdateRedirectUrisResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateRedirectUrisResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateRedirectUrisResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRedirectUrisResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRedirectUrisResponseMultiError) AllErrors() []error { return m }

// UpdateRedirectUrisResponseValidationError is the validation error returned
// by UpdateRedirectUrisResponse.Validate if the designated constraints aren't met.
type UpdateRedirectUrisResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRedirectUrisResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRedirectUrisResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRedirectUrisResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRedirectUrisResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRedirectUrisResponseValidationError) ErrorName() string {
	return "UpdateRedirectUrisResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRedirectUrisResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRedirectUrisResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRedirectUrisResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRedirectUrisResponseValidationError{}

// Validate checks the field values on VerifyClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyClientRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyClientRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyClientRequestMultiError, or nil if none found.
func (m *VerifyClientRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyClientRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetServiceId()) < 1 {
		err := VerifyClientRequestValidationError{
			field:  "ServiceId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetClientId()) < 1 {
		err := VerifyClientRequestValidationError{
			field:  "ClientId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetClientSecret()) < 1 {
		err := VerifyClientRequestValidationError{
			field:  "ClientSecret",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyClientRequestMultiError(errors)
	}

	return nil
}

// VerifyClientRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyClientRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyClientRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyClientRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyClientRequestMultiError) AllErrors() []error { return m }

// VerifyClientRequestValidationError is the validation error returned by
// VerifyClientRequest.Validate if the designated constraints aren't met.
type VerifyClientRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyClientRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyClientRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyClientRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyClientRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyClientRequestValidationError) ErrorName() string {
	return "VerifyClientRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyClientRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyClientRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyClientRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyClientRequestValidationError{}

// Validate checks the field values on VerifyClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyClientResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyClientResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyClientResponseMultiError, or nil if none found.
func (m *VerifyClientResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyClientResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Verified

	if all {
		switch v := interface{}(m.GetClient()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VerifyClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VerifyClientResponseValidationError{
					field:  "Client",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyClientResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VerifyClientResponseMultiError(errors)
	}

	return nil
}

// VerifyClientResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyClientResponse.ValidateAll() if the designated
// constraints aren't met.
type VerifyClientResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyClientResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyClientResponseMultiError) AllErrors() []error { return m }

// VerifyClientResponseValidationError is the validation error returned by
// VerifyClientResponse.Validate if the designated constraints aren't met.
type VerifyClientResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyClientResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyClientResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyClientResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyClientResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyClientResponseValidationError) ErrorName() string {
	return "VerifyClientResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyClientResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyClientResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyClientResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyClientResponseValidationError{}

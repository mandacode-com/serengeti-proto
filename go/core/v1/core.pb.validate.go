// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/v1/core.proto

package corev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _core_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ServiceValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ServiceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetCreatedAt() <= 0 {
		err := ServiceValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() <= 0 {
		err := ServiceValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

func (m *Service) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesRequestMultiError, or nil if none found.
func (m *GetServicesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetServicesRequestMultiError(errors)
	}

	return nil
}

// GetServicesRequestMultiError is an error wrapping multiple validation errors
// returned by GetServicesRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServicesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesRequestMultiError) AllErrors() []error { return m }

// GetServicesRequestValidationError is the validation error returned by
// GetServicesRequest.Validate if the designated constraints aren't met.
type GetServicesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesRequestValidationError) ErrorName() string {
	return "GetServicesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesRequestValidationError{}

// Validate checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServicesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServicesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServicesResponseMultiError, or nil if none found.
func (m *GetServicesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServicesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetServices() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServicesResponseValidationError{
						field:  fmt.Sprintf("Services[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServicesResponseValidationError{
					field:  fmt.Sprintf("Services[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServicesResponseMultiError(errors)
	}

	return nil
}

// GetServicesResponseMultiError is an error wrapping multiple validation
// errors returned by GetServicesResponse.ValidateAll() if the designated
// constraints aren't met.
type GetServicesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServicesResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServicesResponseMultiError) AllErrors() []error { return m }

// GetServicesResponseValidationError is the validation error returned by
// GetServicesResponse.Validate if the designated constraints aren't met.
type GetServicesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServicesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServicesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServicesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServicesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServicesResponseValidationError) ErrorName() string {
	return "GetServicesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServicesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServicesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServicesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServicesResponseValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetServiceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

func (m *GetServiceRequest) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceResponseMultiError, or nil if none found.
func (m *GetServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Service != nil {

		if all {
			switch v := interface{}(m.GetService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceResponseMultiError(errors)
	}

	return nil
}

// GetServiceResponseMultiError is an error wrapping multiple validation errors
// returned by GetServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceResponseMultiError) AllErrors() []error { return m }

// GetServiceResponseValidationError is the validation error returned by
// GetServiceResponse.Validate if the designated constraints aren't met.
type GetServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceResponseValidationError) ErrorName() string {
	return "GetServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceResponseValidationError{}

// Validate checks the field values on GetIsActiveServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIsActiveServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIsActiveServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIsActiveServiceRequestMultiError, or nil if none found.
func (m *GetIsActiveServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIsActiveServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetIsActiveServiceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetIsActiveServiceRequestMultiError(errors)
	}

	return nil
}

func (m *GetIsActiveServiceRequest) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetIsActiveServiceRequestMultiError is an error wrapping multiple validation
// errors returned by GetIsActiveServiceRequest.ValidateAll() if the
// designated constraints aren't met.
type GetIsActiveServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIsActiveServiceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIsActiveServiceRequestMultiError) AllErrors() []error { return m }

// GetIsActiveServiceRequestValidationError is the validation error returned by
// GetIsActiveServiceRequest.Validate if the designated constraints aren't met.
type GetIsActiveServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsActiveServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsActiveServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsActiveServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsActiveServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsActiveServiceRequestValidationError) ErrorName() string {
	return "GetIsActiveServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsActiveServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsActiveServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsActiveServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsActiveServiceRequestValidationError{}

// Validate checks the field values on GetIsActiveServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIsActiveServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIsActiveServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIsActiveServiceResponseMultiError, or nil if none found.
func (m *GetIsActiveServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIsActiveServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	if len(errors) > 0 {
		return GetIsActiveServiceResponseMultiError(errors)
	}

	return nil
}

// GetIsActiveServiceResponseMultiError is an error wrapping multiple
// validation errors returned by GetIsActiveServiceResponse.ValidateAll() if
// the designated constraints aren't met.
type GetIsActiveServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIsActiveServiceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIsActiveServiceResponseMultiError) AllErrors() []error { return m }

// GetIsActiveServiceResponseValidationError is the validation error returned
// by GetIsActiveServiceResponse.Validate if the designated constraints aren't met.
type GetIsActiveServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsActiveServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsActiveServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsActiveServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsActiveServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsActiveServiceResponseValidationError) ErrorName() string {
	return "GetIsActiveServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsActiveServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsActiveServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsActiveServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsActiveServiceResponseValidationError{}

// Validate checks the field values on GetIsAvailableServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIsAvailableServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIsAvailableServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetIsAvailableServiceRequestMultiError, or nil if none found.
func (m *GetIsAvailableServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIsAvailableServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetIsAvailableServiceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetIsAvailableServiceRequestMultiError(errors)
	}

	return nil
}

func (m *GetIsAvailableServiceRequest) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetIsAvailableServiceRequestMultiError is an error wrapping multiple
// validation errors returned by GetIsAvailableServiceRequest.ValidateAll() if
// the designated constraints aren't met.
type GetIsAvailableServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIsAvailableServiceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIsAvailableServiceRequestMultiError) AllErrors() []error { return m }

// GetIsAvailableServiceRequestValidationError is the validation error returned
// by GetIsAvailableServiceRequest.Validate if the designated constraints
// aren't met.
type GetIsAvailableServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsAvailableServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsAvailableServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsAvailableServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsAvailableServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsAvailableServiceRequestValidationError) ErrorName() string {
	return "GetIsAvailableServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsAvailableServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsAvailableServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsAvailableServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsAvailableServiceRequestValidationError{}

// Validate checks the field values on GetIsAvailableServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetIsAvailableServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetIsAvailableServiceResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetIsAvailableServiceResponseMultiError, or nil if none found.
func (m *GetIsAvailableServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetIsAvailableServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAvailable

	if len(errors) > 0 {
		return GetIsAvailableServiceResponseMultiError(errors)
	}

	return nil
}

// GetIsAvailableServiceResponseMultiError is an error wrapping multiple
// validation errors returned by GetIsAvailableServiceResponse.ValidateAll()
// if the designated constraints aren't met.
type GetIsAvailableServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetIsAvailableServiceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetIsAvailableServiceResponseMultiError) AllErrors() []error { return m }

// GetIsAvailableServiceResponseValidationError is the validation error
// returned by GetIsAvailableServiceResponse.Validate if the designated
// constraints aren't met.
type GetIsAvailableServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIsAvailableServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIsAvailableServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIsAvailableServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIsAvailableServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIsAvailableServiceResponseValidationError) ErrorName() string {
	return "GetIsAvailableServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIsAvailableServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIsAvailableServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIsAvailableServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIsAvailableServiceResponseValidationError{}

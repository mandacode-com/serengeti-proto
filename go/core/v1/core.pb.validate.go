// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: core/v1/core.proto

package corev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _core_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Service) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ServiceMultiError, or nil if none found.
func (m *Service) ValidateAll() error {
	return m.validate(true)
}

func (m *Service) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = ServiceValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := ServiceValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetCreatedAt() <= 0 {
		err := ServiceValidationError{
			field:  "CreatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUpdatedAt() <= 0 {
		err := ServiceValidationError{
			field:  "UpdatedAt",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for IsActive

	if len(errors) > 0 {
		return ServiceMultiError(errors)
	}

	return nil
}

func (m *Service) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ServiceMultiError is an error wrapping multiple validation errors returned
// by Service.ValidateAll() if the designated constraints aren't met.
type ServiceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ServiceMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ServiceMultiError) AllErrors() []error { return m }

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}

// Validate checks the field values on GetServiceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceRequestMultiError, or nil if none found.
func (m *GetServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetServiceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetServiceRequestMultiError(errors)
	}

	return nil
}

func (m *GetServiceRequest) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetServiceRequestMultiError is an error wrapping multiple validation errors
// returned by GetServiceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceRequestMultiError) AllErrors() []error { return m }

// GetServiceRequestValidationError is the validation error returned by
// GetServiceRequest.Validate if the designated constraints aren't met.
type GetServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceRequestValidationError) ErrorName() string {
	return "GetServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceRequestValidationError{}

// Validate checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetServiceResponseMultiError, or nil if none found.
func (m *GetServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Service != nil {

		if all {
			switch v := interface{}(m.GetService()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetServiceResponseValidationError{
						field:  "Service",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetService()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetServiceResponseValidationError{
					field:  "Service",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetServiceResponseMultiError(errors)
	}

	return nil
}

// GetServiceResponseMultiError is an error wrapping multiple validation errors
// returned by GetServiceResponse.ValidateAll() if the designated constraints
// aren't met.
type GetServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetServiceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetServiceResponseMultiError) AllErrors() []error { return m }

// GetServiceResponseValidationError is the validation error returned by
// GetServiceResponse.Validate if the designated constraints aren't met.
type GetServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetServiceResponseValidationError) ErrorName() string {
	return "GetServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetServiceResponseValidationError{}

// Validate checks the field values on IsActiveServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsActiveServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsActiveServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsActiveServiceRequestMultiError, or nil if none found.
func (m *IsActiveServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsActiveServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = IsActiveServiceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsActiveServiceRequestMultiError(errors)
	}

	return nil
}

func (m *IsActiveServiceRequest) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IsActiveServiceRequestMultiError is an error wrapping multiple validation
// errors returned by IsActiveServiceRequest.ValidateAll() if the designated
// constraints aren't met.
type IsActiveServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsActiveServiceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsActiveServiceRequestMultiError) AllErrors() []error { return m }

// IsActiveServiceRequestValidationError is the validation error returned by
// IsActiveServiceRequest.Validate if the designated constraints aren't met.
type IsActiveServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsActiveServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsActiveServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsActiveServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsActiveServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsActiveServiceRequestValidationError) ErrorName() string {
	return "IsActiveServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsActiveServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsActiveServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsActiveServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsActiveServiceRequestValidationError{}

// Validate checks the field values on IsActiveServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsActiveServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsActiveServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsActiveServiceResponseMultiError, or nil if none found.
func (m *IsActiveServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsActiveServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsActive

	if len(errors) > 0 {
		return IsActiveServiceResponseMultiError(errors)
	}

	return nil
}

// IsActiveServiceResponseMultiError is an error wrapping multiple validation
// errors returned by IsActiveServiceResponse.ValidateAll() if the designated
// constraints aren't met.
type IsActiveServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsActiveServiceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsActiveServiceResponseMultiError) AllErrors() []error { return m }

// IsActiveServiceResponseValidationError is the validation error returned by
// IsActiveServiceResponse.Validate if the designated constraints aren't met.
type IsActiveServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsActiveServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsActiveServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsActiveServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsActiveServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsActiveServiceResponseValidationError) ErrorName() string {
	return "IsActiveServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsActiveServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsActiveServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsActiveServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsActiveServiceResponseValidationError{}

// Validate checks the field values on IsAvailableServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAvailableServiceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAvailableServiceRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAvailableServiceRequestMultiError, or nil if none found.
func (m *IsAvailableServiceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAvailableServiceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = IsAvailableServiceRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IsAvailableServiceRequestMultiError(errors)
	}

	return nil
}

func (m *IsAvailableServiceRequest) _validateUuid(uuid string) error {
	if matched := _core_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// IsAvailableServiceRequestMultiError is an error wrapping multiple validation
// errors returned by IsAvailableServiceRequest.ValidateAll() if the
// designated constraints aren't met.
type IsAvailableServiceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAvailableServiceRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAvailableServiceRequestMultiError) AllErrors() []error { return m }

// IsAvailableServiceRequestValidationError is the validation error returned by
// IsAvailableServiceRequest.Validate if the designated constraints aren't met.
type IsAvailableServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAvailableServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAvailableServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAvailableServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAvailableServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAvailableServiceRequestValidationError) ErrorName() string {
	return "IsAvailableServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsAvailableServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAvailableServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAvailableServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAvailableServiceRequestValidationError{}

// Validate checks the field values on IsAvailableServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAvailableServiceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAvailableServiceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAvailableServiceResponseMultiError, or nil if none found.
func (m *IsAvailableServiceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAvailableServiceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsAvailable

	if len(errors) > 0 {
		return IsAvailableServiceResponseMultiError(errors)
	}

	return nil
}

// IsAvailableServiceResponseMultiError is an error wrapping multiple
// validation errors returned by IsAvailableServiceResponse.ValidateAll() if
// the designated constraints aren't met.
type IsAvailableServiceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAvailableServiceResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAvailableServiceResponseMultiError) AllErrors() []error { return m }

// IsAvailableServiceResponseValidationError is the validation error returned
// by IsAvailableServiceResponse.Validate if the designated constraints aren't met.
type IsAvailableServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAvailableServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAvailableServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAvailableServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAvailableServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAvailableServiceResponseValidationError) ErrorName() string {
	return "IsAvailableServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsAvailableServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAvailableServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAvailableServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAvailableServiceResponseValidationError{}
